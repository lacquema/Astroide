c*************************************************************************
c                        GETACCJ_HJS_TID.F
c*************************************************************************
c This subroutine calculates the acceleration on the massive particles
c in a hierarchical Genealized Jacobi case 
c     TAKES INTO ACCOUNT TIDES & RELATIVITY
c
c                Source for formulas : Mardling & LIn, 2002, ApJ 573, 829 
c             Input:
c                 nbod        ==>  number of massive bodies (int scalor)
c                 tid         ==> 0 (no tide), 1 (tide) or 2 (averaged tide)  
c                 oloc        ==> Link between bodies and orbits
c                                  (2D integer array)
c                 inert       ==> Moments of inertia (real array)
c                 krpl5       ==> k(apsidal consants) * r(radius)^5
c                 Qlov        ==> Q constant's (array)
c                 eta         ==> Masses of centers for orbits (real array)
c                 mu          ==> Masses of satellites for orbits (real arr.)
c                 mass        ==>  mass of bodies (real array)
c                 xj,yj,zj    ==>  position in jacobi coord (real arrays)
c                 vxj,vyj,vzj ==>  Velocity in Jacobi coord (real arrays)
c                 xb,yb,zb    ==>  position in bary centric coord (real arrays)
c                 rotx,roty,rotz ==> Spin vectors of the bodies (real arrays)
c             Output:
c                 ir3j         ==> Inverse Jacobi radii^3 (real arrays)
c                 axj,ayj,azj ==>  acceleration in Jac. coord (real arrays)
c
c Author:  H. Beust  
c Date:    Jun 6, 2008, revised June 23, Oct. 20
c Remarks : Adapted from getaccj_hjs.f

      subroutine getaccj_hjs_tid(nbod,tid,oloc,mass,inert,krpl5,Qlov,
     &     eta,mu,xj,yj,zj,vxj,vyj,vzj,xb,yb,zb,ir3j,
     &     rotx,roty,rotz,axj,ayj,azj)

      include '../swift.inc'

c...  Inputs: 
      integer nbod
      integer oloc(NPLMAX,NPLMAX)
      integer tid(nbod)
      real*8 inert(nbod),krpl5(nbod),Qlov(nbod)
      real*8 mass(nbod),eta(nbod),mu(nbod)
      real*8 xj(nbod),yj(nbod),zj(nbod)
      real*8 vxj(nbod),vyj(nbod),vzj(nbod)
      real*8 xb(nbod),yb(nbod),zb(nbod)
      real*8 rotx(nbod),roty(nbod),rotz(nbod)

c...  Outputs:
      real*8 axj(nbod),ayj(nbod),azj(nbod),ir3j(nbod)
c      real*8 drotx(nbod),droty(nbod),drotz(nbod)
                
c...  Internals:
      integer i,j,k,ialpha
      real*8 rr2(NPLMAX),rr3(NPLMAX),imas(NPLMAX),irj(NPLMAX)
      real*8 dx(NPLMAX,NPLMAX),dy(NPLMAX,NPLMAX),dz(NPLMAX,NPLMAX)
      real*8 fqdx(2),fqdy(2),fqdz(2),ftfx(2),ftfy(2),ftfz(2)
      real*8 accijx(NPLMAX,NPLMAX),accijy(NPLMAX,NPLMAX)
      real*8 frelx,frely,frelz
      real*8 accijz(NPLMAX,NPLMAX),rij2,irij3,a,e,q
      real*8 epsx,epsy,epsz,eps2,xx,yy,zz,ps,mm,f1,f2,ux,uy,uz,nn
      real*8 na,exq,exq5,exq9,exq11,exq12,exq14,ex2,e4,e6,a2,a3,a4,a5
      real*8 exq2,exq3,ep,ep2,ep3,ep4,ep7,q2,q3,q4,q5,q8
      real*8 e1(3),e2(3),e3(3),r1(2),r2(2),r3(2),rot2
      real*8 hh1,hh2,hh3,hh4,hh5,hh6,hh7,hh8,hh9,fx,fy,fz
      real*8 vdotr,rx,ry,vx,vy,vz,cu,su
      real*8, parameter :: 
     &           cl = 2.9979248d8*86400.d0*365.2422d0/1.4959787061d11
      real*8, parameter :: cl2 = cl*cl

c----
c...  Executable code 

c...  get thr r^-3's

      do i = 2,nbod
         rr2(i) = xj(i)*xj(i) + yj(i)*yj(i) + zj(i)*zj(i)
         irj(i) = 1.d0/sqrt(rr2(i))
         rr3(i) = rr2(i)/irj(i)
         imas(i) = 1.d0/eta(i)+1.d0/mu(i)
         ir3j(i) = 1.d0/rr3(i)
         axj(i) = 0.0d0
         ayj(i) = 0.0d0
         azj(i) = 0.0d0
      end do
      
c...  First compute the cross terms

      do i=1,nbod-1
        do j=i+1,nbod
          dx(i,j) = xb(j) - xb(i)
          dy(i,j) = yb(j) - yb(i)
          dz(i,j) = zb(j) - zb(i)
          rij2 = dx(i,j)*dx(i,j) + dy(i,j)*dy(i,j) + dz(i,j)*dz(i,j)
          irij3 = 1.0d0/(rij2*sqrt(rij2))
          accijx(i,j) = mass(i)*mass(j)*dx(i,j)*irij3
          accijy(i,j) = mass(i)*mass(j)*dy(i,j)*irij3
          accijz(i,j) = mass(i)*mass(j)*dz(i,j)*irij3
          dx(j,i) = -dx(i,j)
          dy(j,i) = -dy(i,j)
          dz(j,i) = -dz(i,j)
          accijx(j,i) = -accijx(i,j)
          accijy(j,i) = -accijy(i,j)
          accijz(j,i) = -accijz(i,j)
        end do
      end do

c... Compute accel for each orbit k
      do k=2,nbod

c...  First compute the contribution of the outer bodies
        do j=1,nbod
          if (oloc(k,j).eq.0) then  ! Body #j is an outer body
            do i=1,nbod
              if (oloc(k,i).eq.1) then !  body #i is a satellite in orbit #k
                axj(k) = axj(k) + accijx(i,j)/mu(k)
                ayj(k) = ayj(k) + accijy(i,j)/mu(k)
                azj(k) = azj(k) + accijz(i,j)/mu(k)
              else if (oloc(k,i).eq.-1) then ! body #i is a center in orbit #k
                axj(k) = axj(k) - accijx(i,j)/eta(k)
                ayj(k) = ayj(k) - accijy(i,j)/eta(k)
                azj(k) = azj(k) - accijz(i,j)/eta(k)
              end if
            end do
          end if
        end do

c... Now compute the internal contributions
        do i=1,nbod
          if (oloc(k,i).eq.1) then  
            do j=1,nbod
              if (oloc(k,j).eq.-1) then ! i = satellite, j = center
                epsx = dx(i,j) - xj(k)
                epsy = dy(i,j) - yj(k)
                epsz = dz(i,j) - zj(k)
                eps2 = epsx*epsx + epsy*epsy + epsz*epsz
                ps = epsx*xj(k) + epsy*yj(k) + epsz*zj(k)
                xx = eps2 + 2.d0*ps
                yy = (rr2(k)+xx)*sqrt(rr2(k)+xx)
                zz = -xx*ir3j(k)*(3.d0*rr2(k)*rr2(k)
     &               +3.d0*rr2(k)*xx+xx*xx)/(rr3(k)+yy)/yy
                mm = imas(k)*mass(i)*mass(j)
                axj(k) = axj(k) + mm*dx(i,j)*zz
                ayj(k) = ayj(k) + mm*dy(i,j)*zz
                azj(k) = azj(k) + mm*dz(i,j)*zz
              end if
            end do
          end if
        end do

c...   Now compute tidal terms for orbit k
c...   i and j will be satellite & center for this orbit. We assume 
c...   there is only i and j
c...   Source Mardling & Lin, 2002, ApJ 573, 829

c        tid(k)=0
        select case (tid(k))
          case(1)
            i = 1
            do while (oloc(k,i).ne.1)
              i = i + 1
            end do
            j = 1
            do while (oloc(k,j).ne.-1)
              j = j + 1
            end do
            call orbel_xv2aeq(xj(k),yj(k),zj(k),vxj(k),vyj(k),vzj(k),
     &                 mu(k)+eta(k),ialpha,a,e,q) 
            nn = sqrt((eta(k)+mu(k))/a)/a
            ux = xj(k)*irj(k)
            uy = yj(k)*irj(k)
            uz = zj(k)*irj(k)
            ps = rotx(j)*ux + roty(j)*uy + rotz(j)*uz  
            f1 = 5.d0*ps*ps 
     &           - (rotx(j)*rotx(j)+roty(j)*roty(j)+rotz(j)*rotz(j))
     &           - 12.d0*mu(k)*ir3j(k)   
            f2 = (1.d0+mu(k)/eta(k))*krpl5(j)/rr2(k)/rr2(k)
          
c          f2 = 0.d0
            fqdx(1) = f2*(f1*ux-2.d0*ps*rotx(j))
            fqdy(1) = f2*(f1*uy-2.d0*ps*roty(j))
            fqdz(1) = f2*(f1*uz-2.d0*ps*rotz(j))      

            ps = rotx(i)*ux + roty(i)*uy + rotz(i)*uz  
            f1 = 5.d0*ps*ps 
     &           - (rotx(i)*rotx(i)+roty(i)*roty(i)+rotz(i)*rotz(i))
     &           - 12.d0*eta(k)*ir3j(k)   
            f2 = (1.d0+eta(k)/mu(k))*krpl5(i)/rr2(k)/rr2(k)

c          f2 = 0.d0
            fqdx(2) = f2*(f1*ux-2.d0*ps*rotx(i))
            fqdy(2) = f2*(f1*uy-2.d0*ps*roty(i))
            fqdz(2) = f2*(f1*uz-2.d0*ps*rotz(i))      

            f2 = -6.d0*nn*krpl5(j)/Qlov(j)*mu(k)/eta(k)
     &                        *(a**3)*ir3j(k)*ir3j(k)/rr2(k)
            ps = ux*vxj(k) + uy*vyj(k) + uz*vzj(k)

c          f2 = 0.d0
            ftfx(1) = (2.d0*ps*ux+vxj(k)
     &                   -(roty(j)*zj(k)-rotz(j)*yj(k)))*f2
            ftfy(1) = (2.d0*ps*uy+vyj(k)
     &                   -(rotz(j)*xj(k)-rotx(j)*zj(k)))*f2
            ftfz(1) = (2.d0*ps*uz+vzj(k)
     &                   -(rotx(j)*yj(k)-roty(j)*xj(k)))*f2

            f2 = -6.d0*nn*krpl5(i)/Qlov(i)*eta(k)/mu(k)
     &                        *(a**3)*ir3j(k)*ir3j(k)/rr2(k)

c          f2 = 0.d0
            ftfx(2) =(2.d0*ps*ux+vxj(k)
     &                   -(roty(i)*zj(k)-rotz(i)*yj(k)))*f2
            ftfy(2) =(2.d0*ps*uy+vyj(k)
     &                   -(rotz(i)*xj(k)-rotx(i)*zj(k)))*f2
            ftfz(2) =(2.d0*ps*uz+vzj(k)
     &                   -(rotx(i)*yj(k)-roty(i)*xj(k)))*f2

            f1 = eta(k)*mu(k)/(eta(k)+mu(k))/(eta(k)+mu(k))
            f2 = (1.d0+3.d0*f1)*
     &           (vxj(k)*vxj(k) + vyj(k)*vyj(k) + vzj(k)*vzj(k))
            f2 = f2 - 2.d0*(2.d0+f1)*(eta(k)
     &                        +mu(k))*irj(k)-1.5d0*f1*ps*ps

            frelx = -(eta(k)+mu(k))/rr2(k)/cl2 *
     &                             (f2*ux - 2.d0*(2.d0-f1)*ps*vxj(k))
            frely = -(eta(k)+mu(k))/rr2(k)/cl2 *
     &                             (f2*uy - 2.d0*(2.d0-f1)*ps*vyj(k))
            frelz = -(eta(k)+mu(k))/rr2(k)/cl2 *
     &                             (f2*uz - 2.d0*(2.d0-f1)*ps*vzj(k))

            axj(k) = axj(k) + fqdx(1)+fqdx(2) + ftfx(1)+ftfx(2) + frelx
            ayj(k) = ayj(k) + fqdy(1)+fqdy(2) + ftfy(1)+ftfy(2) + frely
            azj(k) = azj(k) + fqdz(1)+fqdz(2) + ftfz(1)+ftfz(2) + frelz

            f1 = -(eta(k)*mu(k))/(eta(k)+mu(k))
c          f1 = 0.d0
c            drotx(j) = f1*
c     &        (yj(k)*(ftfz(1)+fqdz(1))-zj(k)*(ftfy(1)+fqdy(1)))/inert(j)
c            droty(j) = f1*
c     &        (zj(k)*(ftfx(1)+fqdx(1))-xj(k)*(ftfz(1)+fqdz(1)))/inert(j)
c            drotz(j) = f1*
c     &        (xj(k)*(ftfy(1)+fqdy(1))-yj(k)*(ftfx(1)+fqdx(1)))/inert(j)
c            drotx(i) = f1*
c     &        (yj(k)*(ftfz(2)+fqdz(2))-zj(k)*(ftfy(2)+fqdy(2)))/inert(i)
c            droty(i) = f1*
c     &        (zj(k)*(ftfx(2)+fqdx(2))-xj(k)*(ftfz(2)+fqdz(2)))/inert(i)
c            drotz(i) = f1*
c     &        (xj(k)*(ftfy(2)+fqdy(2))-yj(k)*(ftfx(2)+fqdx(2)))/inert(i)

c        print*,'ftf1',sqrt(ftfx(1)**2+ftfy(1)**2+ftfz(1)**2)
c        print*,'ftf2',sqrt(ftfx(2)**2+ftfy(2)**2+ftfz(2)**2)
c        print*,'fqd1',sqrt(fqdx(1)**2+fqdy(1)**2+fqdz(1)**2)
c       print*,'fqd2',sqrt(fqdx(2)**2+fqdy(2)**2+fqdz(2)**2)
          case(2)
            i = 1
            do while (oloc(k,i).ne.1)
              i = i + 1
            end do
            j = 1
            do while (oloc(k,j).ne.-1)
              j = j + 1
            end do
            call orbel_xv2aeq(xj(k),yj(k),zj(k),vxj(k),vyj(k),vzj(k),
     &                 mu(k)+eta(k),ialpha,a,e,q) 
            na = sqrt((eta(k)+mu(k))/a)
            nn = na/a
            ux = xj(k)*irj(k)
            uy = yj(k)*irj(k)
            uz = zj(k)*irj(k)
            exq2 = 1.d0-e*e
            exq = sqrt(exq2)
            exq3 = exq2*exq
            exq5 = exq2*exq3
            exq9 = exq5*exq2*exq2
            exq11 = exq9*exq2
            exq12 = exq11*exq
            exq14 = exq12*exq2
            ex2 = e*e
            e4 = ex2*ex2
            e6 = e4*ex2
            ep = 1.d0+e
            ep2 = ep*ep
            ep3 = ep2*ep
            ep4 = ep2*ep2
            ep7 = ep4*ep2*ep


            q2 = q*q
            q3 = q2*q
            q4 = q2*q2
            q8 = q4*q4            

            e3(1) = (yj(k)*vzj(k)-zj(k)*vyj(k))*exq3/(nn*q2*ep2)
            e3(2) = (zj(k)*vxj(k)-xj(k)*vzj(k))*exq3/(nn*q2*ep2)
            e3(3) = (xj(k)*vyj(k)-yj(k)*vxj(k))*exq3/(nn*q2*ep2)

            if (e.ge.TINY) then
              vdotr = xj(k)*vxj(k)+yj(k)*vyj(k)+zj(k)*vzj(k)
              cu = (1.d0-1.d0/a/irj(k))/e
              if (cu.gt.1.d0) cu = 1.d0
              if (cu.lt.-1.d0) cu =-1.d0
              su = sqrt(1.d0-cu*cu)
              if (vdotr.lt.0.d0) su = -su
              vx = e3(2)*uz-e3(3)*uy
              vy = e3(3)*ux-e3(1)*uz
              vz = e3(1)*uy-e3(2)*ux
              ry = su*exq*a*irj(k)
              rx = (cu-e)*a*irj(k)
              e1(1) = -ry*vx+rx*ux
              e1(2) = -ry*vy+rx*uy
              e1(3) = -ry*vz+rx*uz
c              print*,e1(1),e1(2),e1(3)
c            print*,e,e1(1)**2+e1(2)**2+e1(3)**2
c              e1(1) = ((vyj(k)*e3(3)-vzj(k)*e3(2))*exq/na-ux)/e
c              e1(2) = ((vzj(k)*e3(1)-vxj(k)*e3(3))*exq/na-uy)/e
c              e1(3) = ((vxj(k)*e3(2)-vyj(k)*e3(1))*exq/na-uz)/e
c              print*,e1(1),e1(2),e1(3)
            else
              e1(1) = ux
              e1(2) = uy
              e1(3) = uz
            end if
       
            e2(1) = e3(2)*e1(3)-e3(3)*e1(2)
            e2(2) = e3(3)*e1(1)-e3(1)*e1(3)
            e2(3) = e3(1)*e1(2)-e3(2)*e1(1)

c            hh1 = e/exq5
c            hh2 = 2.5d0*e*(1.d0+1.5d0*ex2+0.125d0*e4)/exq11
c            hh3 = +5.d0/64.d0*(64.d0+240.d0*ex2+120.d0*e4+5.d0*e6)
c     &                         /exq14
            hh1 = e*exq3/ep4
            hh2 = 2.5d0*e*(1.d0+1.5d0*ex2+0.125d0*e4)*exq3/ep7
            hh3 = +5.d0/64.d0*e*(64.d0+240.d0*ex2+120.d0*e4+5.d0*e6)/ep7
            hh4 = e*exq3/ep3

c            hh5 = 1.0d0/exq3
c            hh6 = (16.d0+120.d0*ex2+90.d0*e4+5.d0*e6)/16.d0/exq12
c            hh7 = -(8.d0+12.d0*ex2+e4)/16.d0/exq9
c            hh8 = -(8.d0+36.d0*ex2+5.d0*e4)/16.d0/exq9
c            hh9 = -(8.d0+24.d0*ex2+3.d0*e4)/8.d0/exq9

            r1(1) = rotx(j)*e1(1)+roty(j)*e1(2)+rotz(j)*e1(3)
            r2(1) = rotx(j)*e2(1)+roty(j)*e2(2)+rotz(j)*e2(3)
            r3(1) = rotx(j)*e3(1)+roty(j)*e3(2)+rotz(j)*e3(3)
            r1(2) = rotx(i)*e1(1)+roty(i)*e1(2)+rotz(i)*e1(3)
            r2(2) = rotx(i)*e2(1)+roty(i)*e2(2)+rotz(i)*e2(3)
            r3(2) = rotx(i)*e3(1)+roty(i)*e3(2)+rotz(i)*e3(3)

c.....
            rot2 = rotx(j)*rotx(j)+roty(j)*roty(j)+rotz(j)*rotz(j)
            f2 = (1.d0+mu(k)/eta(k))*krpl5(j)/q4
            fx = (3.75d0*r1(1)*r1(1)+1.25d0*r2(1)*r2(1))*hh1*f2
            fy = 2.5d0*r1(1)*r2(1)*hh1*f2
            fz = 0.d0
c            if (e.gt.0.9999) print*,e,hh1,hh2
            fx = fx  - rot2*hh1*f2
            fx = fx - 12.d0*mu(k)*hh2*f2/q3
            fx = fx - 2.d0*r1(1)*r1(1)*hh1*f2
            fy = fy - 2.d0*r1(1)*r2(1)*hh1*f2
            fz = fz - 2.d0*r1(1)*r3(1)*hh1*f2

            fqdx(1) = fx*e1(1)+fy*e2(1)+fz*e3(1)
            fqdy(1) = fx*e1(2)+fy*e2(2)+fz*e3(2)
            fqdz(1) = fx*e1(3)+fy*e2(3)+fz*e3(3)

c.....
            rot2 = rotx(i)*rotx(i)+roty(i)*roty(i)+rotz(i)*rotz(i)
            f2 = (1.d0+eta(k)/mu(k))*krpl5(i)/q4

            fx = (3.75d0*r1(2)*r1(2)+1.25d0*r2(2)*r2(2))*hh1*f2
            fy = 2.5d0*r1(2)*r2(2)*hh1*f2
            fz = 0.d0
            fx = fx  - rot2*hh1*f2
            fx = fx - 12.d0*eta(k)*hh2*f2/q3
            fx = fx - 2.d0*r1(2)*r1(2)*hh1*f2
            fy = fy - 2.d0*r1(2)*r2(2)*hh1*f2
            fz = fz - 2.d0*r1(2)*r3(2)*hh1*f2

            fqdx(2) = fx*e1(1)+fy*e2(1)+fz*e3(1)
            fqdy(2) = fx*e1(2)+fy*e2(2)+fz*e3(2)
            fqdz(2) = fx*e1(3)+fy*e2(3)+fz*e3(3)

c.....
            f2 = -6.d0*(eta(k)+mu(k))/nn
     &                    *krpl5(j)/Qlov(j)*mu(k)/eta(k)/q8
  
            fx = 0.d0
            fy = f2*hh3*nn*q
            fz = 0.d0

            fy = fy - r3(1)*hh2*q*f2
            fz = fz + r2(1)*hh2*q*f2

            ftfx(1) = fx*e1(1)+fy*e2(1)+fz*e3(1)
            ftfy(1) = fx*e1(2)+fy*e2(2)+fz*e3(2)
            ftfz(1) = fx*e1(3)+fy*e2(3)+fz*e3(3)

c.....
            f2 = -6.d0*(eta(k)+mu(k))/nn
     &                  *krpl5(i)/Qlov(i)*eta(k)/mu(k)/q8

            fx = 0.d0
            fy = f2*hh3*nn*q
            fz = 0.d0

            fy = fy - r3(2)*hh2*q*f2
            fz = fz + r2(2)*hh2*q*f2

            ftfx(2) = fx*e1(1)+fy*e2(1)+fz*e3(1)
            ftfy(2) = fx*e1(2)+fy*e2(2)+fz*e3(2)
            ftfz(2) = fx*e1(3)+fy*e2(3)+fz*e3(3)
c.......
            f1 = eta(k)*mu(k)/(eta(k)+mu(k))/(eta(k)+mu(k))
            f2 = - (eta(k)+mu(k))/cl2/q2
          
            fx = (1.d0+f1)*(eta(k)+mu(k))*hh4*f2
            fy = 0.d0
            fz = 0.d0

            frelx = fx*e1(1)+fy*e2(1)+fz*e3(1)
            frely = fx*e1(2)+fy*e2(2)+fz*e3(2)
            frelz = fx*e1(3)+fy*e2(3)+fz*e3(3)

            axj(k) = axj(k)+fqdx(1)+fqdx(2)+ftfx(1)+ftfx(2)+frelx
            ayj(k) = ayj(k)+fqdy(1)+fqdy(2)+ftfy(1)+ftfy(2)+frely
            azj(k) = azj(k)+fqdz(1)+fqdz(2)+ftfz(1)+ftfz(2)+frelz

c            f1 = -(eta(k)*mu(k))/(eta(k)+mu(k))

c.......  Rotation center
c            f2 = (1.d0+mu(k)/eta(k))*krpl5(j)/a3
c
c            fx = -f1*r3(1)*r2(1)*hh5*f2/inert(j) 
c            fy = +f1*r3(1)*r1(1)*hh5*f2/inert(j)
c            fz = 0.d0
c
c            f2 = -6.d0*nn*krpl5(j)/Qlov(j)*mu(k)/eta(k)/a4
c
c            fz = fz + f1*f2*hh6*na/inert(j)
c
c            fx = fx + f1*f2*r1(1)*hh7*a/inert(j)
c            fy = fy + f1*f2*r2(1)*hh8*a/inert(j)
c            fz = fz + f1*f2*r3(1)*hh9*a/inert(j)
c
c            drotx(j) = fx*e1(1)+fy*e2(1)+fz*e3(1)
c            droty(j) = fx*e1(2)+fy*e2(2)+fz*e3(2)
c            drotz(j) = fx*e1(3)+fy*e2(3)+fz*e3(3)
c
c....... Rotation satellite
c            f2 = (1.d0+eta(k)/mu(k))*krpl5(i)/a3
c
c            fx = -f1*r3(2)*r2(2)*hh5*f2/inert(i) 
c            fy = +f1*r3(2)*r1(2)*hh5*f2/inert(i)
c            fz = 0.d0
c
c            f2 = -6.d0*nn*krpl5(i)/Qlov(i)*eta(k)/mu(k)/a4
c
c            fz = fz + f1*f2*hh6*na/inert(i)
c
c            fx = fx + f1*f2*r1(2)*hh7*a/inert(i)
c            fy = fy + f1*f2*r2(2)*hh8*a/inert(i)
c            fz = fz + f1*f2*r3(2)*hh9*a/inert(i)
c
c            drotx(i) = fx*e1(1)+fy*e2(1)+fz*e3(1)
c            droty(i) = fx*e1(2)+fy*e2(2)+fz*e3(2)
c            drotz(i) = fx*e1(3)+fy*e2(3)+fz*e3(3)

        end select
      end do

      return
      end      ! getaccj_hjs_tid

c---------------------------------------------------------------------




